{"version":3,"sources":["canvas/plugins/contextMenu/contextMenu.tsx","settings/default.tsx","canvas/plugins/selectedNodes.tsx","canvas/plugins/footer/footer.tsx","canvas/layouts.tsx","canvas/plugins/toolbar/handler.tsx","state/events.ts","state/manager.ts","canvas/plugins/hoveredItemInfo.tsx","canvas/plugins/toolbar/rightToolBar.tsx","canvas/plugins/toolbar/leftToolbar.tsx","components/displaySettings/nodeDisplaySettings.tsx","canvas/colorUtils.tsx","components/find/findAndFocus.tsx","components/export/exportCanvas.tsx","components/canvas/canvas.tsx","views/example.tsx","index.js"],"names":["NodeContextMenu","value","model","item","get","console","log","primaryColor","style","keyshape","stroke","react_default","a","createElement","className","borderTopColor","color","icon","fontFamily","label","id","Object","keys","properties","map","key","index","defaultNodeStyle","Utils","getNodeStyleByTheme","nodeSize","mode","miniMapOptions","size","ShowSelectedNodes","props","_useContext","useContext","GraphinContext","graph","apis","selectedNodes","stateManager","useEffect","handleSelectChanged","evt","selectedItems","nodes","length","setSelectedNodes","handleStateChanged","findAllByState","on","off","node","Button","onClick","focusOnNode","borderColor","variant","toString","CloseSquareOutlined","setItemState","removeActiveNode","top","position","Footer","selectedNode","dangerouslySetInnerHTML","__html","messageText","layoutsOptions","type","preventOverlap","preventOverlapPadding","workerEnabled","options","center","linkDistance","maxIteration","focusNode","unitRadius","strictRadial","nodeStrength","edgeStrength","collideStrength","alpha","alphaDecay","alphaMin","onTick","onLayoutEnd","gpuEnabled","maxLevelDiff","sortBy","rankdir","handleToolBarClick","graphinContext","config","handleZoomIn","handleZoomOut","keyCode","addItem","x","y","layout","endsWith","layoutData","find","replace","setLayoutSettings","showExportCanvas","setExportCanvas","fitView","clear","autoPaint","setAutoPaint","render","paint","fitCenter","showDisplaySettings","setShowDisplaySettings","showFindAndFocus","setShowFindAndFocus","Event","message","state","classCallCheck","this","created_at","Date","debug","concat","EVENT_TYPES","welcome","updateLayout","StateManager","setMessageText","setHoveredItem","setNodeDisplaySettings","setEdgeDisplaySettings","layoutSettings","hoveredItem","nodeDisplaySettings","edgeDisplaySettings","setLayoutSettings_","data","event","commit","focusNodeById","getID","toFront","HoveredItemInfo","createItemText","handleNodeMouseEnter","handleNodeMouseLeave","handleEdgeMouseEnter","handleEdgeMouseLeave","rightToolBarOptions","name","OverlayTrigger","placement","overlay","Tooltip","SearchOutlined","ExportOutlined","SettingOutlined","leftToolBarOptions","ClearOutlined","RedoOutlined","ZoomOutOutlined","ZoomInOutlined","FullscreenExitOutlined","ShareAltOutlined","DeploymentUnitOutlined","AppstoreOutlined","PartitionOutlined","NodeDisplaySettings","Card","Header","Body","Text","nodeLabel","nodeSetting","FloatingLabel","controlId","Form","Control","minHeight","as","placeholder","JSON","stringify","edgeLabel","edgeSetting","IconsPalette","Graphin","registerFontFamily","iconLoader","pastel_colour","str","hash","i","charCodeAt","colour","substr","createNode","originalId","styleData","nodeColor","nodeIcon","iconSize","nodeShape","labelPropertyKey","fill","fillOpacity","strokeOpacity","generateNodeStyle","assign","applyStylingToNodes","applyStylingToEdges","edges","edge","labelType","sourceOriginal","source","targetOriginal","target","edgeColor","background","radius","createEdge","applyStylesToData","FindAndFocus","_React$useState","React","useState","_React$useState2","slicedToArray","filteredItems","setFilteredItems","onChange","e","searchStr","findAll","match","RegExp","searchString","ListGroup","filteredItem","Item","cursor","nodeId","ExportCanvas","downloadImage","DragCanvas","Behaviors","ZoomCanvas","ClickSelect","BrushSelect","DragNode","LassoSelect","DragCombo","ActivateRelations","Hoverable","MiniMap","Components","ContextMenu","SnapLine","line","lineWidth","GraphCanvas","_ref","containerId","width","height","initState","_React$useState3","_React$useState4","_React$useState5","_React$useState6","_React$useState7","_React$useState8","_React$useState9","_React$useState10","_React$useState11","_React$useState12","_React$useState13","_React$useState14","_React$useState15","_React$useState16","_React$useState17","_React$useState18","processedData","paddingTop","es","objectSpread","visible","Grid","enableOptimize","canvas_plugins_selectedNodes","left","hoveredItemInfo","maxHeight","bindType","contextMenu_NodeContextMenu","displaySettings_nodeDisplaySettings","findAndFocus","exportCanvas","Toolbar","right","footer_footer","ExampleView","padding","canvas_canvas","rootElement","document","getElementById","createRoot","react","example"],"mappings":"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","file":"static/js/main.cb6abe71.chunk.js","sourcesContent":["import {ContextMenuValue} from \"@antv/graphin\";\nimport React from \"react\";\nimport \"./contextMenu.css\"\nimport {INode} from \"@antv/g6\";\n\n\nexport const NodeContextMenu = (value: ContextMenuValue) => {\n    // const handleClick = (evt: React.MouseEvent<Element, MouseEvent>) => {\n    //     const {onClose, id} = value;\n    //     const target = evt.target as HTMLElement;\n    //     let code = target.getAttribute(\"data-code\");\n    //     // console.log(\"===menu item clicked\", `${e.code}:${id}`);\n    //     console.log(\"===menu item clicked\", code);\n    //     // message.info(`${e.key}:${id}`);\n    //     onClose();\n    // };\n    // @ts-ignore\n    const model = value.item.get(\"model\");\n    console.log(\"model\", model)\n    if (model) {\n        const primaryColor = model.style.keyshape.stroke;\n\n        return (\n            <div className={\"contextMenu\"} style={{borderTopColor: primaryColor}}>\n                <h4 style={{color: primaryColor}}>\n                    {model.style.icon ? <span className=\"icon-foo\"\n                                              style={{fontFamily: model.style.icon.fontFamily,}}>\n                {model.style.icon.value}</span> : <span></span>}\n                    {model.label} </h4>\n                <p className={\"small border-bottom pb-2 mb-0\"}>ID: {model.id}</p>\n                <div className={\"properties\"}>\n                    <div className=\"header text-uppercase mb-2 p-2 \">Properties</div>\n                    <div className=\"body\">\n                        {Object.keys(model.properties || {}).map((key, index) => {\n                            if (model) {\n                                return (<div className={\"propertyItem border-bottom pb-1 \"}>\n                                    <h6 className={\"mb-1\"}>{key} :</h6>\n                                    <p className={\"mb-1\"}>{model.properties[key]}</p>\n                                </div>)\n                            }\n                        })\n                        }\n                    </div>\n                </div>\n\n            </div>\n\n        );\n    }\n    return (<div/>)\n};\n","import {Utils} from \"@antv/graphin\";\n\n\nexport const defaultLayoutSettings = {\n    type: \"grid\",\n    preventOverlap: true\n};\n\nexport const defaultNodeStyle = Utils.getNodeStyleByTheme({\n    nodeSize: 40,\n    primaryColor: \"green\",\n    mode: \"dark\"\n});\n\n\nexport const miniMapOptions = {size: [250, 150]};\n\n","import React, {useContext, useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {ContextMenuValue, GraphinContext, IG6GraphEvent} from \"@antv/graphin\";\nimport {INode, NodeConfig} from '@antv/g6';\nimport Button from 'react-bootstrap/Button';\nimport {CloseSquareOutlined} from \"@ant-design/icons\"\nimport \"./selectedNodes.css\";\n\n// @ts-ignore\nfunction ShowSelectedNodes(props: any) {\n    console.log(\"ShowSelectedNodes props\", props)\n    const {graph, apis} = useContext(GraphinContext);\n    const {selectedNodes, stateManager} = props\n\n    const focusOnNode = (node: INode) => {\n        // const model = node.getModel() as NodeConfig;\n        stateManager.focusOnNode(apis, node);\n    };\n    useEffect(() => {\n        console.log(\"ShowSelectedNodes useEffect\")\n        const handleSelectChanged = (evt: IG6GraphEvent) => {\n            console.log(\"handleSelectChanged\", evt.selectedItems)\n            // @ts-ignore\n            const nodes = evt.selectedItems.nodes;\n            // @ts-ignore\n            if (nodes.length !== selectedNodes.length) {\n                stateManager.setSelectedNodes(nodes)\n            }\n        };\n        const handleStateChanged = (evt: IG6GraphEvent) => {\n            console.log(\"handleStateChanged\", evt.selectedItems)\n            // @ts-ignore\n            const nodes = graph.findAllByState('node', 'selected')\n            // @ts-ignore\n            stateManager.setSelectedNodes(nodes)\n        };\n\n        graph.on('nodeselectchange', handleSelectChanged);\n        graph.on('afteritemstatechange', handleStateChanged);\n        return () => {\n            graph.off('nodeselectchange', handleSelectChanged);\n            graph.off('afteritemstatechange', handleStateChanged);\n        };\n    }, []);\n\n    const removeActiveNode = (node: INode) => {\n        console.log(\"removeActiveNode\", node)\n        graph.setItemState(node, \"selected\", false)\n    }\n    return (\n        <div className={\"selectedNodes\"} style={props.style}>\n            {selectedNodes.map((node: INode) => {\n                const model = node.get(\"model\")\n                console.log(\"model+++\", model)\n                if (model) {\n                    return (\n                        // @ts-ignore\n                        <Button className=\"me-3 selectedNode\" size=\"sm\"\n                                onClick={() => focusOnNode(node)}\n                                style={{\n                                    borderColor: model.style.keyshape.stroke,\n                                    color: model.style.keyshape.stroke,\n                                }}\n                                variant=\"outline-secondary\" key={model.id}>\n                            {\n                                model.style.icon? <span className=\"icon-foo me-1\"\n                                  style={{fontFamily: model.style.icon.fontFamily,}}>\n                {model.style.icon.value}</span> : <span />\n                            }\n\n                            {model.style.label.value.toString()}\n                            <CloseSquareOutlined\n                                className={\"ms-1\"}\n                                onClick={() => removeActiveNode(node)}\n                                style={{\"top\": \"-2px\", \"position\": \"relative\"}}/>\n                        </Button>\n                    )\n                }\n            })}\n        </div>\n    )\n}\n\nShowSelectedNodes.propTypes = {\n    selectedNodes: PropTypes.any,\n    stateManager: PropTypes.any,\n    style: PropTypes.object\n}\nexport default ShowSelectedNodes\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./footer.css\"\nimport {INode} from \"@antv/g6\";\n\n\n\n\n\n// @ts-ignore\nfunction Footer(props: any) {\n    const selectedNode = props.selectedNodes[0] ? props.selectedNodes.length == 1 : null\n    return (\n        <div className=\"graphin-components-footer\" style={props.style}>\n            <div className=\"statusMessage float-start pt-1\"><span dangerouslySetInnerHTML={{__html: props.messageText}}></span></div>\n            <div className={\"nodeSettings float-end\"}>{selectedNode &&\n                <div>node settings here</div>\n            }</div>\n        </div>\n    )\n}\n\nFooter.propTypes = {\n    style: PropTypes.object,\n    messageText: PropTypes.string,\n    selectedNodes: PropTypes.any\n}\nexport default Footer","export const layoutsOptions = [\n    {\n        type: 'graphin-force',\n        label: 'graphin-force',\n    },\n    {\n        type: 'grid',\n        label: 'grid',\n        // begin: [0, 0], // 可选，\n        preventOverlap: true, // 可选，必须配合 nodeSize\n        preventOverlapPadding: 20, // 可选\n        // nodeSize: 30, // 可选\n        // condense: false, // 可选\n        // rows: 5, // 可选\n        // cols: 5, // 可选\n        // sortBy: 'degree', // 可选\n        workerEnabled: true, // 可选，开启 web-worker\n    },\n    {\n        type: 'circular',\n        label: 'circular',\n        options: {\n            // center: [0, 0], // 可选，默认为图的中心\n            // radius: null, // 可选\n            // startRadius: 10, // 可选\n            // endRadius: 100, // 可选\n            // clockwise: false, // 可选\n            // divisions: 5, // 可选\n            // ordering: 'degree', // 可选\n            // // angleRatio: 1, // 可选\n        }\n    },\n    {\n        type: 'radial',\n        label: 'radial',\n        options: {\n            center: [0, 0], // 可选，默认为图的中心\n            linkDistance: 150, // 可选，边长\n            maxIteration: 1000, // 可选\n            focusNode: 'node11', // 可选\n            unitRadius: 100, // 可选\n            preventOverlap: true, // 可选，必须配合 nodeSize\n            nodeSize: 30, // 可选\n            strictRadial: false, // 可选\n            workerEnabled: false, // 可选，开启 web-worker\n        }\n    },\n    {\n        type: 'force',\n        label: 'force',\n\n        preventOverlap: true,\n        // center: [200, 200], // 可选，默认为图的中心\n        linkDistance: 50, // 可选，边长\n        nodeStrength: 30, // 可选\n        edgeStrength: 0.8, // 可选\n        collideStrength: 0.8, // 可选\n        nodeSize: 30, // 可选\n        alpha: 0.9, // 可选\n        alphaDecay: 0.3, // 可选\n        alphaMin: 0.01, // 可选\n        // forceSimulation: null, // 可选\n        onTick: () => {\n            // 可选\n            console.log('ticking');\n        },\n        onLayoutEnd: () => {\n            // 可选\n            console.log('force layout done');\n        },\n    },\n    {\n        type: 'gForce',\n        label: 'gForce',\n        linkDistance: 150, // 可选，边长\n        nodeStrength: 30, // 可选\n        edgeStrength: 0.1, // 可选\n        nodeSize: 30, // 可选\n        onTick: () => {\n            // 可选\n            console.log('ticking');\n        },\n        onLayoutEnd: () => {\n            // 可选\n            console.log('force layout done');\n        },\n        workerEnabled: false, // 可选，开启 web-worker\n        gpuEnabled: false, // 可选，开启 GPU 并行计算，G6 4.0 支持\n    },\n    {\n        type: 'concentric',\n        label: 'concentric',\n        maxLevelDiff: 0.5,\n        sortBy: 'degree',\n        // center: [200, 200], // 可选，\n        // linkDistance: 50, // 可选，边长\n        // preventOverlap: true, // 可选，必须配合 nodeSize\n        // nodeSize: 30, // 可选\n        // sweep: 10, // 可选\n        // equidistant: false, // 可选\n        // startAngle: 0, // 可选\n        // clockwise: false, // 可选\n        // maxLevelDiff: 10, // 可选\n        // sortBy: 'degree', // 可选\n        // workerEnabled: false, // 可选，开启 web-worker\n    },\n    {\n        type: 'dagre',\n        label: 'dagre',\n        rankdir: 'LR', // 可选，默认为图的中心\n        // align: 'DL', // 可选\n        // nodesep: 20, // 可选\n        // ranksep: 50, // 可选\n        // controlPoints: true, // 可选\n    },\n    {\n        type: 'fruchterman',\n        label: 'fruchterman',\n        // center: [200, 200], // 可选，默认为图的中心\n        // gravity: 20, // 可选\n        // speed: 2, // 可选\n        // clustering: true, // 可选\n        // clusterGravity: 30, // 可选\n        // maxIteration: 2000, // 可选，迭代次数\n        // workerEnabled: false, // 可选，开启 web-worker\n        // gpuEnabled: false, // 可选，开启 GPU 并行计算，G6 4.0 支持\n    },\n];","import {GraphinContextType} from \"@antv/graphin/lib/GraphinContext\";\nimport {layoutsOptions} from \"../../layouts\";\n\n// const handleLayoutChange = (value: any) => {\n//     console.log('value', value);\n//     setState(value);\n// };\nexport const handleToolBarClick = (graphinContext: GraphinContextType, config: any, stateManager: any) => {\n    const {apis, graph} = graphinContext;\n    const {handleZoomIn, handleZoomOut} = apis;\n    const keyCode = config.key;\n    if (keyCode === \"zoomIn\") {\n        handleZoomOut(); // for some weird reason, this is correct\n    } else if (keyCode === \"zoomOut\") {\n        handleZoomIn(); // for some weird reason, this is correct\n    } else if (keyCode === \"add-data\") {\n        graph.addItem(\"node\", {\n            id: \"node2\",\n            label: \"node2\",\n            x: 300,\n            y: 150\n        });\n        graph.layout()\n    } else if (keyCode.endsWith(\"-layout\")) {\n        const layoutData = layoutsOptions.find(item => item.type === keyCode.replace(\"-layout\", \"\"));\n        stateManager.setLayoutSettings(layoutData)\n    } else if (keyCode === \"screenshot\") {\n        console.log(\"Screenshow \");\n        if (stateManager.showExportCanvas === true) {\n            stateManager.setExportCanvas(false)\n        } else {\n            stateManager.setExportCanvas(true)\n        }\n\n    } else if (keyCode === \"fit-center\") {\n        graph.fitView()\n    } else if (keyCode === \"canvas-clear\") {\n        graph.clear()\n    } else if (keyCode === \"canvas-redraw\") {\n        const autoPaint = graph.get('autoPaint');\n        graph.setAutoPaint(false);\n        graph.render();\n        graph.paint();\n        graph.setAutoPaint(autoPaint);\n        graph.fitCenter()\n\n    } else if (keyCode === \"display-settings\") {\n        if (stateManager.showDisplaySettings === true) {\n            stateManager.setShowDisplaySettings(false)\n        } else {\n            stateManager.setShowDisplaySettings(true)\n        }\n    } else if (keyCode === \"find-and-focus\") {\n        if (stateManager.showFindAndFocus === true) {\n            stateManager.setShowFindAndFocus(false)\n        } else {\n            stateManager.setShowFindAndFocus(true)\n        }\n    }\n\n};\n\n","class EventTypes {\n    welcome = \"WELCOME\"\n    updateLayout = \"LAYOUT_UPDATE\"\n\n\n}\n\nclass Event {\n    type = null\n    message = null\n    state= null\n    created_at = null\n\n    constructor(type: string, message: string, state: any) {\n        // @ts-ignore\n        this.created_at = new Date();\n        // @ts-ignore\n        this.type = type;\n        // @ts-ignore\n        this.message = message;\n        this.state = state\n    }\n\n    commit(){\n        console.debug(`event created type=\"${this.type}\" message=\"${this.message}\"`)\n        return this;\n    }\n\n}\nexport default Event;\nexport const EVENT_TYPES = new EventTypes()\n","import PropTypes from \"prop-types\";\nimport Event, {EVENT_TYPES} from \"./events\";\n\n\nexport default class StateManager {\n    setLayoutSettings_ = null\n    setSelectedNodes = null\n    setMessageText = null\n    setHoveredItem = null\n    setShowDisplaySettings = null\n    setNodeDisplaySettings = null\n    setEdgeDisplaySettings = null\n    setShowFindAndFocus = null\n    setExportCanvas = null\n\n    layoutSettings = null\n    selectedNodes = null\n    messageText = null\n    hoveredItem = null\n    showDisplaySettings = null\n    nodeDisplaySettings = null\n    edgeDisplaySettings = null\n    showFindAndFocus = null\n    showExportCanvas= null\n\n    // @ts-ignore\n    constructor(setLayoutSettings: PropTypes.func, setSelectedNodes: PropTypes.func,\n                // @ts-ignore\n                setMessageText: PropTypes.func, setHoveredItem: PropTypes.func, setShowDisplaySettings: PropTypes.func,\n                // @ts-ignore\n                setNodeDisplaySettings: PropTypes.func, setEdgeDisplaySettings: PropTypes.func, setShowFindAndFocus: PropTypes.func,\n                // @ts-ignore\n                setExportCanvas: PropTypes.func,\n                // @ts-ignore\n                layoutSettings: PropTypes.object, selectedNodes: PropTypes.object, messageText: PropTypes.object,\n                // @ts-ignore\n                hoveredItem: PropTypes.object, showDisplaySettings: PropTypes.object,\n                // @ts-ignore\n                nodeDisplaySettings: PropTypes.object, edgeDisplaySettings: PropTypes.object,\n                // @ts-ignore\n                showFindAndFocus: PropTypes.bool, showExportCanvas: PropTypes.bool\n    ) {\n        this.setLayoutSettings_ = setLayoutSettings\n        this.setSelectedNodes = setSelectedNodes\n        this.setMessageText = setMessageText\n        this.setHoveredItem = setHoveredItem\n        this.setShowDisplaySettings = setShowDisplaySettings\n        this.setNodeDisplaySettings = setNodeDisplaySettings\n        this.setEdgeDisplaySettings = setEdgeDisplaySettings\n        this.setShowFindAndFocus = setShowFindAndFocus\n        this.setExportCanvas = setExportCanvas\n\n\n        this.layoutSettings = layoutSettings\n        this.selectedNodes = selectedNodes\n        this.messageText = messageText\n        this.hoveredItem = hoveredItem\n        this.showDisplaySettings = showDisplaySettings\n        this.nodeDisplaySettings = nodeDisplaySettings\n        this.edgeDisplaySettings = edgeDisplaySettings\n        this.showFindAndFocus = showFindAndFocus\n        this.showExportCanvas = showExportCanvas\n    }\n\n\n    setLayoutSettings(data: any) {\n        // @ts-ignore\n        console.log(\"setLayoutSettings\", data)\n        const event = new Event(EVENT_TYPES.updateLayout, `Updated to ${data.label} layout`, data).commit();\n        // @ts-ignore\n        this.setMessageText(event.message)\n        // @ts-ignore\n        this.setLayoutSettings_(data)\n    }\n\n    focusOnNode(apis: any, node: any) {\n        apis.focusNodeById(node.getID());\n        node.toFront();\n    }\n\n    // showDisplaySettings() {\n    //     // @ts-ignore\n    //     this.setShowDisplaySettings(true)\n    // }\n\n}","import React, {useContext, useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {ContextMenuValue, GraphinContext, IG6GraphEvent} from \"@antv/graphin\";\nimport {INode, NodeConfig} from '@antv/g6';\nimport Button from 'react-bootstrap/Button';\nimport {CloseSquareOutlined} from \"@ant-design/icons\"\n\n// @ts-ignore\nfunction HoveredItemInfo(props: any) {\n    console.log(\"ShowSelectedNodes props\", props)\n    const {graph, apis} = useContext(GraphinContext);\n\n    const createItemText = (model: any) => {\n        return `<strong>${model.label}</strong>[id:${model.id}]`\n    }\n\n    useEffect(() => {\n\n        var handleNodeMouseEnter = function handleNodeMouseEnter(evt: IG6GraphEvent) {\n            // @ts-ignore\n            const model = evt.item.get(\"model\");\n            props.stateManager.setHoveredItem(evt.item)\n            // @ts-ignore\n            props.stateManager.setMessageText(`Hovered on Node: ${createItemText(model)}`)\n        }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n        var handleNodeMouseLeave = function handleNodeMouseLeave(evt: IG6GraphEvent) {\n            props.stateManager.setHoveredItem(null)\n            props.stateManager.setMessageText(null)\n        }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n        var handleEdgeMouseEnter = function handleEdgeMouseEnter(evt: IG6GraphEvent) {\n            // @ts-ignore\n            const model = evt.item.get(\"model\");\n            console.log(\"====model\", model)\n            props.stateManager.setHoveredItem(evt.item)\n            // @ts-ignore\n            props.stateManager.setMessageText(`Hovered on Edge: ${createItemText(model)}`)\n\n        }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n        var handleEdgeMouseLeave = function handleEdgeMouseLeave(evt: IG6GraphEvent) {\n            props.stateManager.setHoveredItem(null)\n            props.stateManager.setMessageText(null)\n        };\n\n        graph.on('node:mouseenter', handleNodeMouseEnter);\n        graph.on('node:mouseleave', handleNodeMouseLeave);\n\n        graph.on('edge:mouseenter', handleEdgeMouseEnter);\n        graph.on('edge:mouseleave', handleEdgeMouseLeave);\n\n        return function () {\n            graph.off('node:mouseenter', handleNodeMouseEnter);\n            graph.off('node:mouseleave', handleNodeMouseLeave);\n\n            graph.off('edge:mouseenter', handleEdgeMouseEnter);\n            graph.off('edge:mouseleave', handleEdgeMouseLeave);\n        };\n    }, []);\n    return (<div/>)\n\n}\n\nHoveredItemInfo.propTypes = {\n    stateManager: PropTypes.any,\n}\nexport default HoveredItemInfo\n","import React from \"react\";\nimport {ClearOutlined, RedoOutlined, SearchOutlined ,  ExportOutlined, SettingOutlined} from \"@ant-design/icons\";\nimport \"./toolbar.css\"\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\nexport const rightToolBarOptions = [\n\n    {\n        key: \"find-and-focus\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-screenshot`}>\n                                      Find and focus node in the canvas\n                                  </Tooltip>\n                              }><SearchOutlined/></OverlayTrigger>\n    },\n    {\n        key: \"space-4\",\n        name: <div className={\"divider\"}></div>\n    },\n    {\n        key: \"screenshot\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-screenshot`}>\n                                      Export canvas\n                                  </Tooltip>\n                              }><ExportOutlined /></OverlayTrigger>\n    },\n    {\n        key: \"space-5\",\n        name: <div className={\"divider\"}></div>\n    },\n    {\n        key: \"display-settings\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-display-settings`}>\n                                      Display Settings\n                                  </Tooltip>\n                              }><SettingOutlined/></OverlayTrigger>\n    }\n];\n","import React from \"react\";\nimport {GraphinContextType} from \"@antv/graphin/lib/GraphinContext\";\nimport {\n    ZoomInOutlined, ZoomOutOutlined, PartitionOutlined,\n    FullscreenExitOutlined, ClearOutlined, RedoOutlined, CameraOutlined,\n    ShareAltOutlined, DeploymentUnitOutlined, AppstoreOutlined\n} from \"@ant-design/icons\";\nimport \"./toolbar.css\"\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\nexport const leftToolBarOptions = [\n\n    {\n        key: \"canvas-clear\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-clear`}>\n                                      Clear Canvas\n                                  </Tooltip>\n                              }><ClearOutlined/></OverlayTrigger>\n    }, {\n        key: \"canvas-redraw\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-redraw`}>\n                                      Redraw Canvas\n                                  </Tooltip>\n                              }><RedoOutlined/></OverlayTrigger>\n    }, {\n        key: \"space-2\",\n        name: <div className={\"divider\"}></div>\n    },\n\n    {\n        key: \"zoomOut\",\n        // name: (\n        //   <span>\n        //     zoom out\n        //   </span>\n        // ),\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-zoomOut`}>\n                                      Zoom out\n                                  </Tooltip>\n                              }><ZoomOutOutlined/>\n        </OverlayTrigger>\n    },\n    {\n        key: \"zoomIn\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-zoomIn`}>\n                                      Zoom In\n                                  </Tooltip>\n                              }><ZoomInOutlined/></OverlayTrigger>\n    }, {\n        key: \"fit-center\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-fit-center`}>\n                                      Fit to view\n                                  </Tooltip>\n                              }><FullscreenExitOutlined/></OverlayTrigger>\n    },\n    {\n        key: \"space-1\",\n        name: <div className={\"divider\"}></div>\n    },\n    {\n        key: \"gForce-layout\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-gForce`}>\n                                      gForce Layout\n                                  </Tooltip>\n                              }><ShareAltOutlined/></OverlayTrigger>\n    },\n    // {\n    //     key: \"radial-layout\",\n    //     name: \"radial\"\n    // },\n    {\n        key: \"circular-layout\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-circular`}>\n                                      Circular Layout\n                                  </Tooltip>\n                              }><DeploymentUnitOutlined/></OverlayTrigger>\n    }, {\n        key: \"grid-layout\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-grid`}>\n                                      Grid Layout\n                                  </Tooltip>\n                              }><AppstoreOutlined/></OverlayTrigger>\n    }, {\n        key: \"dagre-layout\",\n        name: <OverlayTrigger placement={\"bottom\"}\n                              overlay={\n                                  <Tooltip id={`tooltip-dagre`}>\n                                      Dagre Layout\n                                  </Tooltip>\n                              }><PartitionOutlined/></OverlayTrigger>\n    },\n];\n","import React, {useContext} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Card, FloatingLabel, Form} from \"react-bootstrap\";\nimport {ContextMenuValue, GraphinContext, IG6GraphEvent} from \"@antv/graphin\";\n\n\n/*\n\nnodeDisplaySettings = {\n    \"labelType\":\n    \"nodeIcon\": !\n    \"nodeSize\",\n    \"nodeColor\"\n    \"nodeShape\",\n}\n\n */\n\n// @ts-ignore\nfunction NodeDisplaySettings(props: any) {\n\n    const {apis, graph} = useContext(GraphinContext);\n    const updateConfig = (labelType: string) => {\n\n        // update the styles of type\n        const nodes = graph.findAll('node', (node) => {\n            return node.get('model').type === labelType;\n        });\n        // props.stateManager.\n    }\n    return (\n        <div className=\"rightModal  bg-white\" style={props.style}>\n            <Card>\n                <Card.Header>Node display settings</Card.Header>\n                <Card.Body className={\"\"}>\n                    <Card.Text>\n                        {Object.keys(props.nodeDisplaySettings).map((nodeLabel, index) => {\n                            const nodeSetting = props.nodeDisplaySettings[nodeLabel];\n                            if (nodeSetting) {\n                                return (<div className={\"propertyItem border-bottom pb-1 \"}>\n                                    <h6 className={\"mb-1\"}>{nodeLabel} :</h6>\n                                    <FloatingLabel\n                                        controlId=\"nodeDisplayFloatingTextarea\"\n                                        label=\"Node Display config\"\n                                        className=\"mb-3\"\n                                    > <Form.Control\n                                        style={{\"minHeight\": \"130px\"}}\n                                        as=\"textarea\" placeholder=\"add node display config here\"\n                                        value={JSON.stringify(nodeSetting, null, 2)}\n                                    />\n                                    </FloatingLabel>\n                                </div>)\n                            }\n                        })\n                        }\n\n\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n            <Card>\n                <Card.Header>Edge display settings</Card.Header>\n                <Card.Body className={\"\"}>\n                    <Card.Text>\n                        {Object.keys(props.edgeDisplaySettings).map((edgeLabel, index) => {\n                            const edgeSetting = props.edgeDisplaySettings[edgeLabel] || {};\n                            if (edgeSetting) {\n                                return (<div className={\"propertyItem border-bottom pb-1 \"}>\n                                    <h6 className={\"mb-1\"}>{edgeLabel} :</h6>\n                                    <FloatingLabel\n                                        controlId=\"edgeDisplayFloatingTextarea\"\n                                        label=\"edge Display config\"\n                                        className=\"mb-3\"\n                                    > <Form.Control\n                                        style={{\"minHeight\": \"130px\"}}\n                                        as=\"textarea\" placeholder=\"update edge display config here\"\n                                        value={JSON.stringify(edgeSetting, null, 2)}\n                                    />\n                                    </FloatingLabel>\n                                </div>)\n                            }\n                        })\n                        }\n\n\n\n\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nNodeDisplaySettings.propTypes = {\n    style: PropTypes.object,\n    nodeDisplaySettings: PropTypes.object,\n    edgeDisplaySettings: PropTypes.object,\n    stateManager: PropTypes.any,\n}\nexport default NodeDisplaySettings","import Graphin from \"@antv/graphin\";\nimport iconLoader from \"@antv/graphin-icons\";\nimport PropTypes from \"prop-types\";\nimport {INode} from '@antv/g6';\nimport {IUserNode, IUserEdge} from \"@antv/graphin/lib/typings/type\";\n\nexport const IconsPalette = Graphin.registerFontFamily(iconLoader);\n// export const ColorPalette = [\n//     '#5F95FF', // blue\n//     '#61DDAA',\n//     '#65789B',\n//     '#F6BD16',\n//     '#7262FD',\n//     '#78D3F8',\n//     '#9661BC',\n//     '#F6903D',\n//     '#008685',\n//     '#F08BB4'\n// ];\n\n\nfunction lightOrDark(color: any) {\n    let r, g, b\n    // Check the format of the color, HEX or RGB?\n    if (color.match(/^rgb/)) {\n\n        // If HEX --> store the red, green, blue values in separate variables\n        color = color.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        r = color[1];\n        g = color[2];\n        b = color[3];\n    } else {\n\n        // If RGB --> Convert it to HEX: http://gist.github.com/983661\n        color = +(\"0x\" + color.slice(1).replace(\n                color.length < 5 && /./g, '$&$&'\n            )\n        );\n\n        r = color >> 16;\n        g = color >> 8 & 255;\n        b = color & 255;\n    }\n\n    // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html\n    let hsp = Math.sqrt(\n        0.299 * (r * r) +\n        0.587 * (g * g) +\n        0.114 * (b * b)\n    );\n\n    // Using the HSP value, determine whether the color is light or dark\n    if (hsp > 127.5) {\n\n        return 'light';\n    } else {\n\n        return 'dark';\n    }\n}\n\n// @ts-ignore\nconst pastel_colour = function (str: string) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let colour = '#';\n    for (let i = 0; i < 3; i++) {\n        let value = (hash >> (i * 8)) & 0xFF;\n        colour += ('00' + value.toString(16)).substr(-2);\n    }\n\n    // if (lightOrDark(colour) === \"dark\") {\n    //     return colour\n    // } else {\n    //     return pastel_colour(str + \"tested\" )\n    // }\n    return colour\n}\n\nconst generateNodeStyle = (node: INode, styleData: object) => {\n    // @ts-ignore\n    const label = node.label;\n\n\n    // @ts-ignore\n    const color = (styleData && styleData.nodeColor) ? styleData.nodeColor : pastel_colour(label)\n\n    // @ts-ignore\n    const nodeSize = (styleData && styleData.nodeSize) ? styleData.nodeSize : 18\n    // @ts-ignore\n    const nodeIcon = (styleData && styleData.nodeIcon) ? styleData.nodeIcon : null\n    // @ts-ignore\n    const nodeShape = (styleData && styleData.nodeShape) ? styleData.nodeShape : \"graphin-circle\"\n    const iconSize = nodeSize * 0.5\n    // @ts-ignore\n    const nodeLabel = (styleData && styleData.labelPropertyKey && node.properties[styleData.labelPropertyKey]) ?\n        // @ts-ignore\n        node.properties[styleData.labelPropertyKey] : node.id;\n\n    let style = {\n        label: {\n            // @ts-ignore\n            value: nodeLabel\n        },\n        keyshape: {\n            size: nodeSize,\n            stroke: color,\n            fill: color,\n            fillOpacity: 0.2,\n            strokeOpacity: 1\n        },\n\n    };\n\n    if (nodeIcon) {\n        // @ts-ignore\n        style[\"icon\"] = {\n            type: \"font\",\n            value: IconsPalette[nodeIcon],\n            size: iconSize,\n            fill: color,\n            fontFamily: \"graphin\"\n        }\n    }\n\n    return style\n}\n\nconst createNode = (node: object, nodeSetting: object) => {\n    // @ts-ignore\n    node.originalId = node.id;\n    // @ts-ignore\n    node.id = node.id.toString();\n    // @ts-ignore\n    // node.labelType = node.label\n    // @ts-ignore\n    node.style = generateNodeStyle(node, nodeSetting);\n    return Object.assign({}, node) as IUserNode;\n\n}\n\n// @ts-ignore\nexport const applyStylingToNodes = (nodes: Array<any>, nodeDisplaySettings: PropTypes.object) => {\n    return nodes.map((node, i) => {\n        // @ts-ignore\n        return createNode(node, nodeDisplaySettings[node.label])\n    });\n}\n\n\nconst createEdge = (edge: IUserEdge, edgeSetting: object) => {\n    // @ts-ignore\n    if (edge.id) {\n        // @ts-ignore\n        edge.originalId = edge.id;\n        // @ts-ignore\n        edge.id = edge.id.toString();\n    }\n    edge.labelType = edge.label\n\n\n    edge.sourceOriginal = edge.source\n    edge.source = edge.source.toString()\n\n    edge.targetOriginal = edge.target\n    edge.target = edge.target.toString()\n\n    edge.style = {};\n\n    // const color = pastel_colour(labelType)\n// @ts-ignore\n    const color = (edgeSetting && edgeSetting.edgeColor) ? edgeSetting.edgeColor : pastel_colour(edge.label)\n\n    // @ts-ignore\n    const edgeLabel = (edgeSetting && edgeSetting.labelPropertyKey\n    // @ts-ignore\n        && edge.properties && edge.properties[edgeSetting.labelPropertyKey]) ?\n        // @ts-ignore\n        edge.properties[edgeSetting.labelPropertyKey] :  edge.label;\n    //edge.source.toString() + \"-\" + edge.target.toString();\n    edge.style.label = {\n        value: edgeLabel,\n        fill: color, // assign color based on edge type\n        background: {\n            fill: \"#fff\",\n            radius: 8,\n            stroke: \"#fff\"\n        },\n        strokeOpacity: 0.2\n    };\n\n    edge.style.keyshape = {\n        stroke: color // assign color based on edge type\n    };\n    return Object.assign({}, edge) as IUserEdge;\n}\n\n// @ts-ignore\nexport const applyStylingToEdges = (edges: Array<any>, edgeDisplaySettings: PropTypes.object) => {\n    return edges.map(function (edge, i) {\n        return createEdge(edge, edgeDisplaySettings[edge.label] || {})\n    });\n}\n\n\nexport const applyStylesToData = (data: { nodes: Array<any>, edges: Array<any> },\n                                  // @ts-ignore\n                                  nodeDisplaySettings: PropTypes.object, edgeDisplaySettings: PropTypes.object) => {\n    return {\n        nodes: applyStylingToNodes(data.nodes, nodeDisplaySettings),\n        edges: applyStylingToEdges(data.edges, edgeDisplaySettings)\n    }\n}","import React, {useContext} from \"react\";\nimport PropTypes, {node} from \"prop-types\";\nimport {Card, Form, Button, InputGroup, FloatingLabel} from \"react-bootstrap\";\nimport {GraphinContext} from \"@antv/graphin\";\nimport {SearchOutlined} from \"@ant-design/icons\";\nimport {INode, NodeConfig} from '@antv/g6';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\n// @ts-ignore\nfunction FindAndFocus(props: any) {\n\n    const {apis, graph} = useContext(GraphinContext);\n    const [filteredItems, setFilteredItems] = React.useState([]);\n\n\n    const searchString = (searchStr: string) => {\n        console.log(searchStr);\n        // update the styles of type\n        const filteredItems = graph.findAll('node', (node) => {\n            return node.get('model').style.label.value.toString().match(new RegExp(searchStr, \"i\"));\n        });\n        // @ts-ignore\n        setFilteredItems(filteredItems);\n    }\n\n    const focusNode = (nodeId: string) => {\n        apis.focusNodeById(nodeId);\n    }\n    return (\n        <div className=\"rightModal bg-white\" style={props.style}>\n            <Card className={\"h-100\"}>\n                <Card.Header>Find and focus</Card.Header>\n                <Card.Body className={\"\"}>\n                    <Form.Control className={\"mb-3\"} placeholder=\"Search by label\"\n                                  onChange={(e) => searchString(e.target.value)}/>\n                    {\n                        filteredItems.length > 0 ?\n                            <Card>\n                                <ListGroup variant=\"flush\">\n                                    {filteredItems.map((filteredItem: INode, index) => {\n                                        const model = filteredItem.get(\"model\")\n                                        console.log(\"model+++\", model)\n                                        if (model) {\n\n                                            return (<ListGroup.Item key={model.id}\n                                                                    style={{\n                                                                        \"cursor\": \"pointer\",\n                                                                        \"color\": model.style.keyshape.stroke ? model.style.keyshape.stroke : \"auto\"\n                                                                    }}\n                                                                    onClick={() => focusNode(model.id)}>\n\n                                                {\n                                                    model.style.icon ?\n                                                        <span className=\"icon-foo me-1\"\n                                                              style={{fontFamily: model.style.icon.fontFamily,}}>\n                                                    {model.style.icon.value}</span> : <span/>\n                                                }\n                                                {model.style.label.value.toString()}\n                                            </ListGroup.Item>)\n                                        }\n                                    })}\n                                </ListGroup>\n                            </Card>\n                            : <span/>\n                    }\n\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nFindAndFocus.propTypes = {\n    stateManager: PropTypes.any,\n}\nexport default FindAndFocus","import React, {useContext} from \"react\";\nimport PropTypes, {node} from \"prop-types\";\nimport {Card, Form, Button, InputGroup, FloatingLabel} from \"react-bootstrap\";\nimport {GraphinContext} from \"@antv/graphin\";\nimport {SearchOutlined} from \"@ant-design/icons\";\nimport {INode, NodeConfig} from '@antv/g6';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\n// @ts-ignore\nfunction ExportCanvas(props: any) {\n\n    const {apis, graph} = useContext(GraphinContext);\n\n    // graph.downloadImage()\n\n    return (\n        <div className=\"rightModal bg-white\" style={props.style}>\n            <Card className={\"h-100\"}>\n                <Card.Header>Export canvas</Card.Header>\n                <Card.Body className={\"\"}>\n\n                    <Button className={\"me-3\"} onClick={() => graph.downloadImage(\"canvas.png\", 'image/png' )}>PNG</Button>\n                    <Button className={\"me-3\"} onClick={() => graph.downloadImage(\"canvas.jpeg\", 'image/jpeg', \"#ffffff\" )}>JPEG</Button>\n                    {/*<Button className={\"me-3\"} onClick={() => graph.toDataURL()}>SVG</Button>*/}\n\n\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nExportCanvas.propTypes = {\n    stateManager: PropTypes.any,\n}\nexport default ExportCanvas","import React from \"react\";\nimport Graphin, {Behaviors, Components} from \"@antv/graphin\";\nimport {Grid} from \"@antv/graphin-components\";\nimport {Toolbar} from '@antv/graphin-components';\nimport SelectMultipleNodes from \"../../canvas/behaviours/selectMultiple\"\nimport FocusSelectedNodes from \"../../canvas/behaviours/focusSelected\"\nimport \"@antv/graphin-icons/dist/index.css\";\nimport {NodeContextMenu} from \"../../canvas/plugins/contextMenu/contextMenu\";\nimport {defaultLayoutSettings, miniMapOptions} from \"../../settings/default\";\nimport {defaultNodeStyle} from \"../../settings/default\";\nimport \"../../canvas/style.css\";\nimport {GraphinContextType} from \"@antv/graphin/lib/GraphinContext\";\nimport ShowSelectedNodes from \"../../canvas/plugins/selectedNodes\"\nimport Footer from \"../../canvas/plugins/footer/footer\";\nimport \"./canvas.css\"\nimport {handleToolBarClick} from \"../../canvas/plugins/toolbar/handler\";\nimport PropTypes from 'prop-types';\nimport StateManager from \"../../state/manager\";\nimport HoveredItemInfo from \"../../canvas/plugins/hoveredItemInfo\";\nimport {rightToolBarOptions} from \"../../canvas/plugins/toolbar/rightToolBar\";\nimport {leftToolBarOptions} from \"../../canvas/plugins/toolbar/leftToolbar\";\nimport NodeDisplaySettings from \"../displaySettings/nodeDisplaySettings\";\nimport \"../normalise.css\";\nimport {applyStylesToData} from \"../../canvas/colorUtils\";\nimport FindAndFocus from \"../find/findAndFocus\";\nimport ExportCanvas from \"../export/exportCanvas\"\n\nconst {\n    DragCanvas, // Drag the canvas\n    ZoomCanvas, //Zoom canvas\n    ClickSelect, // Click to select the node\n    BrushSelect, //Circle selection operation\n    DragNode, // Drag node\n    // ResizeCanvas, // automatically adjust canvas width and height\n    LassoSelect, // Lasso operation\n    DragCombo, // Drag Combo\n    ActivateRelations, // associated highlight\n    Hoverable // Hover operation,\n\n    // DragNodeWithForce\n} = Behaviors;\n\nconst {MiniMap, ContextMenu, SnapLine} = Components;\n// const {ContextMenu} = Components;\nconst options = {\n    line: {\n        stroke: 'lightgreen',\n        lineWidth: 0.5,\n    },\n};\n/*\n\n{\n    statusMessageText : null,\n    data : {\n        nodes: [],\n        edges: [],\n    },\n    selectedNodes: [],\n    hoveredItem: null,\n    displaySettings: {\n        canvas: {\n            background: null,\n            layout: {}\n        },\n        nodeSettings: {\n        },\n        edgeSettings: {\n        }\n    }\n}\n*/\n\n\n// @ts-ignore\nfunction GraphCanvas({data, containerId, width, height, initState}) {\n    console.log(data);\n    const [layoutSettings, setLayoutSettings] = React.useState(initState[\"layoutSettings\"]);\n    const [selectedNodes, setSelectedNodes] = React.useState(initState[\"selectedNodes\"]);\n    const [messageText, setMessageText] = React.useState(initState[\"messageText\"]);\n    const [hoveredItem, setHoveredItem] = React.useState(initState[\"hoveredItem\"]);\n    const [showDisplaySettings, setShowDisplaySettings] = React.useState(initState[\"showDisplaySettings\"]);\n    const [showFindAndFocus, setShowFindAndFocus] = React.useState(initState[\"showFindAndFocus\"]);\n    const [showExportCanvas, setExportCanvas] = React.useState(false);\n    const [nodeDisplaySettings, setNodeDisplaySettings] = React.useState(initState[\"nodeDisplaySettings\"]);\n    const [edgeDisplaySettings, setEdgeDisplaySettings] = React.useState(initState[\"edgeDisplaySettings\"]);\n\n\n    const processedData = applyStylesToData(data,\n        initState[\"nodeDisplaySettings\"],\n        initState[\"edgeDisplaySettings\"])\n\n    const stateManager = new StateManager(\n        setLayoutSettings,\n        setSelectedNodes,\n        setMessageText,\n        setHoveredItem,\n        setShowDisplaySettings,\n        setNodeDisplaySettings,\n        setEdgeDisplaySettings,\n        setShowFindAndFocus,\n        setExportCanvas,\n        layoutSettings,\n        selectedNodes,\n        messageText,\n        hoveredItem,\n        nodeDisplaySettings,\n        edgeDisplaySettings,\n        showDisplaySettings,\n        showFindAndFocus,\n        showExportCanvas\n    )\n\n\n    // @ts-ignore\n    return (\n        <div className=\"grid-plugin-container graph-canvas-container\"\n             style={{\n                 width: width, height: height,\n                 paddingTop: \"30px\"\n             }}>\n\n            <Graphin\n                data={processedData}\n                className={\"graph-canvas\"}\n                autoPaint={true}\n                // height={height - 38}\n                layout={{type: layoutSettings.type, ...layoutSettings.options}}\n                containerId={containerId}\n                defaultNodeStyle={defaultNodeStyle}\n            >\n\n                <SnapLine options={options} visible/>\n\n                <Grid/>\n                <MiniMap options={miniMapOptions}/>\n                <ZoomCanvas enableOptimize/>\n                {/* Drag and Drop Canvas */}\n                <DragCanvas/>\n                {/* Zoom Canvas */}\n                <ZoomCanvas/>\n                {/* Drag-and-drop node */}\n                <DragNode/>\n                {/* Click Node */}\n                <DragCombo/>\n                {/* Click Node */}\n                <ClickSelect/>\n                {/* Circle Node */}\n                <BrushSelect/>\n                <ActivateRelations/>\n                {/*<UndoRedo ref={historyRef}/>*/}\n                {/*<FocusSelectedNodes/>*/}\n                {/*<SelectMultipleNodes />*/}\n\n                {/*<ResizeCanvas graphDOM={this.graphDOM as HTMLDivElement} />*/}\n                {/* <TreeCollapse /> */}\n                {/** hovering node**/}\n\n                <ShowSelectedNodes\n                    selectedNodes={selectedNodes}\n                    stateManager={stateManager}\n                    style={{\n                        \"top\": \"10px\",\n                        \"left\": \"15px\",\n                        \"position\": \"absolute\"\n                    }}/>\n                <HoveredItemInfo stateManager={stateManager}/>\n                <ContextMenu style={{\n                    background: \"#fff\",\n                    maxHeight: \"600px\",\n                    width: \"320px\"\n                }} bindType=\"node\">\n                    {(value) => {\n                        return <NodeContextMenu {...value} />;\n                    }}\n                </ContextMenu>\n\n                <LassoSelect/>\n                <Hoverable bindType=\"edge\"/>\n                <Hoverable bindType=\"node\"/>\n\n                {\n                    showDisplaySettings\n                        ? <NodeDisplaySettings\n                            nodeDisplaySettings={nodeDisplaySettings}\n                            edgeDisplaySettings={edgeDisplaySettings}\n                            stateManager={stateManager}\n                        /> : <span/>\n                }\n                {\n                    showFindAndFocus\n                        ? <FindAndFocus stateManager={stateManager} /> : <span/>\n                }  {\n                    showExportCanvas\n                        ? <ExportCanvas stateManager={stateManager} /> : <span/>\n                }\n                <Toolbar\n                    style={{\"top\": \"-31px\", \"left\": \"-1px\"}}\n                    options={leftToolBarOptions}\n                    onChange={(graphinContext: GraphinContextType, config: any) =>\n                        handleToolBarClick(graphinContext, config, stateManager)}\n                />\n\n                <Toolbar\n                    style={{\"top\": \"-31px\", \"right\": \"-1px\"}}\n                    options={rightToolBarOptions}\n                    onChange={(graphinContext: GraphinContextType, config: any) =>\n                        handleToolBarClick(graphinContext, config, stateManager)}\n                />\n\n                {/* <DragNodeWithForce /> */}\n                <Footer messageText={messageText} selectedNodes={selectedNodes}/>\n\n            </Graphin>\n        </div>\n    );\n}\n\n\nGraphCanvas.propTypes = {\n    data: PropTypes.any,\n    containerId: PropTypes.string,\n    style: PropTypes.object,\n    initState: PropTypes.object,\n}\n\nexport default GraphCanvas;","import React from \"react\";\nimport {Utils} from \"@antv/graphin\";\nimport {applyStylesToData} from \"../canvas/colorUtils\";\nimport GraphCanvas from \"../components/canvas/canvas\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport data from \"../exampleData/author-story/data.json\";\nimport initState from \"../exampleData/author-story/settings.json\";\n\n// import data from \"../exampleData/flight-story/data.json\";\n// import defaultSettings from \"../canvas/defaults\";\n// const initState = defaultSettings\n\n// const data = Utils.mock(1345).random().graphin();\n// data.nodes.map((node)=>{\n//     node.label = \"User\"\n// })\n// data.edges.map((node)=>{\n//     node.label = \"relationship\"\n// })\n\nfunction ExampleView() {\n    return <div className=\"\" style={{\"padding\": \"30px\"}}>\n        <GraphCanvas data={data}\n                     initState={initState}\n                     containerId={\"graph-canvas\"}\n                     width={1280} height={920}\n        />\n    </div>\n}\n\nexport default ExampleView;","import React, {StrictMode} from \"react\";\nimport {createRoot} from \"react-dom/client\";\nimport ExampleView from \"./views/example\";\n// import App from \"./views\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\n\nroot.render(\n    <StrictMode>\n        <ExampleView/>\n    </StrictMode>\n);\n"],"sourceRoot":""}